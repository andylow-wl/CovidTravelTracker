{"remainingRequest":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue","mtime":1649337177782},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/babel.config.js","mtime":1648925663561},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1649334884969},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js","mtime":1649334887771},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1649334884969},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js","mtime":1649334887567}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["axios","firebaseApp","getFirestore","doc","setDoc","db","name","components","data","AU","AU_nc","CN","ID","JP","KR","MY","US","methods","fetchCovidCase","console","log","enddateObj","Date","setHours","startdateObj","setDate","getDate","enddate","toISOString","startdate","get","then","response","forEach","Country","date","Cases","mounted"],"sourceRoot":"","sources":["/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue"],"sourcesContent":["<template>\n    <button @click=\"fetchCovidCase()\">Update Charts</button>\n</template>\n<script>\nimport axios from 'axios'\nimport firebaseApp from '../firebase.js';\nimport { getFirestore } from \"firebase/firestore\";\nimport { doc, setDoc } from \"firebase/firestore\";\nconst db = getFirestore(firebaseApp);\nexport default {\n    name : 'AddDataFS',\n    components : {},\n    data() {\n        return  {\n            AU : '',\n            AU_nc : {},\n            CN : '',\n            ID : '',\n            JP : '',\n            KR : '',\n            MY : '',\n            US : '',\n        }\n    },\n    methods : {\n        async  fetchCovidCase() {\n            console.log(\"Working\")\n            var enddateObj = new Date()\n            enddateObj.setHours(8,0,0,0)\n            var startdateObj = new Date(new Date().setDate(enddateObj.getDate()-30))\n            startdateObj.setHours(8,0,0,0)\n            var enddate = enddateObj.toISOString();\n            var startdate = startdateObj.toISOString();\n            console.log(startdate, enddate)\n            await axios.get('https://api.covid19api.com/total/country/' + 'AU' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.AU = response))\n            this.AU.data.forEach(data => setDoc(doc(db, \"Australia\", data[\"Date\"]), {\n                Country: \"Australia\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))\n            // const start = startdateObj;\n            // const end = enddateObj;\n            // let loop = new Date(start);\n            // while (loop <= end) {\n            //     console.log(loop.toISOString())\n            //     var loopISO = loop.toISOString()\n            //     this.AU_nc[loopISO] = 0\n            //     let newDate = loop.setDate(loop.getDate() + 1);\n            //     loop = new Date(newDate);\n            // }\n            // this.AU_nc[startdate] = this.AU.data[1]['Cases'] - this.AU.data[0]['Cases']\n            // this.AU_nc[enddate] = this.AU.data[30]['Cases'] - this.AU.data[29]['Cases']\n            // console.log(this.AU_nc)\n            await axios.get('https://api.covid19api.com/total/country/' + 'CN' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.CN = response))\n            this.CN.data.forEach(data => setDoc(doc(db, \"China\", data[\"Date\"]), {\n                Country: \"China\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))\n            await axios.get('https://api.covid19api.com/total/country/' + 'ID' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.ID = response))\n            this.ID.data.forEach(data => setDoc(doc(db, \"Indonesia\", data[\"Date\"]), {\n                Country: \"Indonesia\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))      \n            await axios.get('https://api.covid19api.com/total/country/' + 'JP' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.JP = response))\n            this.JP.data.forEach(data => setDoc(doc(db, \"Japan\", data[\"Date\"]), {\n                Country: \"Japan\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'KR' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.KR = response))\n            this.KR.data.forEach(data => setDoc(doc(db, \"Korea\", data[\"Date\"]), {\n                Country: \"South Korea\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'MY' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.MY = response))\n            this.MY.data.forEach(data => setDoc(doc(db, \"Malaysia\", data[\"Date\"]), {\n                Country: \"Malaysia\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))            \n            await axios.get('https://api.covid19api.com/total/country/' + 'US' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.US = response))\n            this.US.data.forEach(data => setDoc(doc(db, \"United States\", data[\"Date\"]), {\n                Country: \"USA\", date: data[\"Date\"], Cases: data[\"Cases\"]\n            }))\n        }\n    },\n    mounted() {\n    },\n}\n</script>"]}]}