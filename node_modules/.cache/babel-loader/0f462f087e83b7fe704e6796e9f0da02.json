{"remainingRequest":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue","mtime":1648915536933},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/babel.config.js","mtime":1648894529053},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1648896701259},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js","mtime":1648896703400},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1648896701259},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js","mtime":1648896703237}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kaW9oYXJ5YWRpL0Rlc2t0b3AvQlQzMTAzX3Byb2plY3QvQ292aWRUcmF2ZWxUcmFja2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0FkZERhdGFGUycsCiAgY29tcG9uZW50czoge30sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIEFVOiAnJywKICAgICAgQ046ICcnLAogICAgICBJRDogJycsCiAgICAgIEpQOiAnJywKICAgICAgS1I6ICcnLAogICAgICBNWTogJycsCiAgICAgIFVTOiAnJwogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGZldGNoQ292aWRDYXNlOiBmdW5jdGlvbiBmZXRjaENvdmlkQ2FzZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGVuZGRhdGVPYmosIHN0YXJ0ZGF0ZU9iaiwgZW5kZGF0ZSwgc3RhcnRkYXRlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGVuZGRhdGVPYmogPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICAgICAgc3RhcnRkYXRlT2JqID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXREYXRlKGVuZGRhdGVPYmouZ2V0RGF0ZSgpIC0gMzApKTsKICAgICAgICAgICAgICAgIGVuZGRhdGUgPSBlbmRkYXRlT2JqLnRvSVNPU3RyaW5nKCk7CiAgICAgICAgICAgICAgICBzdGFydGRhdGUgPSBzdGFydGRhdGVPYmoudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgICAgIGVuZGRhdGUgPSBlbmRkYXRlLnN1YnN0cmluZygwLCBlbmRkYXRlLmluZGV4T2YoJ1QnKSArIDEpOwogICAgICAgICAgICAgICAgc3RhcnRkYXRlID0gc3RhcnRkYXRlLnN1YnN0cmluZygwLCBzdGFydGRhdGUuaW5kZXhPZignVCcpICsgMSk7CiAgICAgICAgICAgICAgICBlbmRkYXRlICs9ICIwMDowMDowMFoiOwogICAgICAgICAgICAgICAgc3RhcnRkYXRlICs9ICIwMDowMDowMFoiOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhcnRkYXRlLCBlbmRkYXRlKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdBVScgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLkFVID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdDTicgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLkNOID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdJRCcgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLklEID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdKUCcgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLkpQID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdLUicgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLktSID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdNWScgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLk1ZID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vYXBpLmNvdmlkMTlhcGkuY29tL3RvdGFsL2NvdW50cnkvJyArICdVUycgKyAnL3N0YXR1cy9jb25maXJtZWQ/ZnJvbT0nICsgc3RhcnRkYXRlICsgJyZ0bz0nICsgZW5kZGF0ZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLlVTID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBjb25zb2xlLmxvZyh0aGlzLkFVKTsKICB9Cn07"},{"version":3,"mappings":"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","names":["axios","name","components","data","AU","CN","ID","JP","KR","MY","US","methods","fetchCovidCase","enddateObj","Date","startdateObj","setDate","getDate","enddate","toISOString","startdate","substring","indexOf","console","log","get","then","response","mounted"],"sourceRoot":"","sources":["/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue"],"sourcesContent":["<template>\n    <button @click=\"fetchCovidCase()\">test</button>\n    <div>{{CN.data}}</div>\n</template>\n<script>\nimport axios from 'axios'\n\nexport default {\n    name : 'AddDataFS',\n    components : {},\n    data() {\n        return  {\n            AU : '',\n            CN : '',\n            ID : '',\n            JP : '',\n            KR : '',\n            MY : '',\n            US : '',\n        }\n    },\n    methods : {\n        async  fetchCovidCase() {\n            var enddateObj = new Date()\n            var startdateObj = new Date(new Date().setDate(enddateObj.getDate()-30));\n            var enddate = enddateObj.toISOString();\n            var startdate = startdateObj.toISOString();\n            enddate = enddate.substring(0, enddate.indexOf('T')+1);\n            startdate = startdate.substring(0, startdate.indexOf('T')+1);\n            enddate += \"00:00:00Z\"\n            startdate += \"00:00:00Z\"\n            console.log(startdate, enddate)\n            await axios.get('https://api.covid19api.com/total/country/' + 'AU' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.AU = response))\n            await axios.get('https://api.covid19api.com/total/country/' + 'CN' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.CN = response))\n            await axios.get('https://api.covid19api.com/total/country/' + 'ID' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.ID = response))\n            await axios.get('https://api.covid19api.com/total/country/' + 'JP' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.JP = response))\n            await axios.get('https://api.covid19api.com/total/country/' + 'KR' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.KR = response))\n            await axios.get('https://api.covid19api.com/total/country/' + 'MY' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.MY = response))\n            await axios.get('https://api.covid19api.com/total/country/' + 'US' + '/status/confirmed?from=' + startdate + '&to=' + enddate).then(response => (this.US = response))\n        }\n    },\n    mounted() {\n        console.log(this.AU)\n    },\n}\n</script>\n"]}]}