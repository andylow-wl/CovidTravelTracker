{"remainingRequest":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue","mtime":1648910414922},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/babel.config.js","mtime":1648894529053},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1648896701259},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/babel-loader/lib/index.js","mtime":1648896703400},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/cache-loader/dist/cjs.js","mtime":1648896701259},{"path":"/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/node_modules/vue-loader-v16/dist/index.js","mtime":1648896703237}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kaW9oYXJ5YWRpL0Rlc2t0b3AvQlQzMTAzX3Byb2plY3QvQ292aWRUcmF2ZWxUcmFja2VyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdBZGREYXRhRlMnLAogIGNvbXBvbmVudHM6IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBBVTogW10sCiAgICAgIENIOiBbXSwKICAgICAgSUQ6IFtdLAogICAgICBKUDogW10sCiAgICAgIEtSOiBbXSwKICAgICAgTVk6IFtdLAogICAgICBVUzogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBmZXRjaENvdmlkQ2FzZTogZnVuY3Rpb24gZmV0Y2hDb3ZpZENhc2UoY291bnRyeSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBlbmRkYXRlT2JqLCBzdGFydGRhdGVPYmosIGVuZGRhdGUsIHN0YXJ0ZGF0ZSwgcmVzLCBkYXRhOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGVuZGRhdGVPYmogPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICAgICAgc3RhcnRkYXRlT2JqID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXREYXRlKGVuZGRhdGVPYmouZ2V0RGF0ZSgpIC0gMzApKTsKICAgICAgICAgICAgICAgIGVuZGRhdGUgPSBlbmRkYXRlT2JqLnRvSVNPU3RyaW5nKCk7CiAgICAgICAgICAgICAgICBzdGFydGRhdGUgPSBzdGFydGRhdGVPYmoudG9JU09TdHJpbmcoKTsKICAgICAgICAgICAgICAgIGVuZGRhdGUgPSBlbmRkYXRlLnN1YnN0cmluZygwLCBlbmRkYXRlLmluZGV4T2YoJ1QnKSArIDEpOwogICAgICAgICAgICAgICAgc3RhcnRkYXRlID0gc3RhcnRkYXRlLnN1YnN0cmluZygwLCBzdGFydGRhdGUuaW5kZXhPZignVCcpICsgMSk7CiAgICAgICAgICAgICAgICBlbmRkYXRlICs9ICIwMDowMDowMFoiOwogICAgICAgICAgICAgICAgc3RhcnRkYXRlICs9ICIwMDowMDowMFoiOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coc3RhcnRkYXRlLCBlbmRkYXRlKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCgnaHR0cHM6Ly9hcGkuY292aWQxOWFwaS5jb20vdG90YWwvY291bnRyeS8nICsgY291bnRyeSArICcvc3RhdHVzL2NvbmZpcm1lZD9mcm9tPScgKyBzdGFydGRhdGUgKyAnJnRvPScgKyBlbmRkYXRlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIGRhdGFBdSwgZGF0YUNoLCBkYXRhSWQsIGRhdGFKcCwgZGF0YUtyLCBkYXRhTXksIGRhdGFVczsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoQ292aWRDYXNlKCJhdSIpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGRhdGFBdSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZmV0Y2hDb3ZpZENhc2UoImNuIik7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgZGF0YUNoID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mZXRjaENvdmlkQ2FzZSgiaWQiKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBkYXRhSWQgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDExOwogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mZXRjaENvdmlkQ2FzZSgianAiKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgZGF0YUpwID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNDsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZmV0Y2hDb3ZpZENhc2UoImtyIik7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGRhdGFLciA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoQ292aWRDYXNlKCJteSIpOwoKICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBkYXRhTXkgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDIwOwogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mZXRjaENvdmlkQ2FzZSgidXMiKTsKCiAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgZGF0YVVzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YUF1LCBkYXRhQ2gsIGRhdGFJZCwgZGF0YUpwLCBkYXRhS3IsIGRhdGFNeSwgZGF0YVVzKTsKCiAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"mappings":";;;AAWA,eAAe;AACXA,MAAG,EAAI,WADI;AAEXC,YAAS,EAAI,EAFF;AAGXC,MAHW,kBAGJ;AACH,WAAQ;AACJC,QAAE,EAAE,EADA;AAEJC,QAAE,EAAE,EAFA;AAGJC,QAAE,EAAE,EAHA;AAIJC,QAAE,EAAE,EAJA;AAKJC,QAAE,EAAE,EALA;AAMJC,QAAE,EAAE,EANA;AAOJC,QAAE,EAAE;AAPA,KAAR;AASH,GAbU;AAcXC,SAAM,EAAI;AACAC,kBADA,0BACeC,OADf,EACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,0BADsB,GACT,IAAIC,IAAJ,EADS;AAEtBC,4BAFsB,GAEP,IAAID,IAAJ,CAAS,IAAIA,IAAJ,GAAWE,OAAX,CAAmBH,UAAU,CAACI,OAAX,KAAqB,EAAxC,CAAT,CAFO;AAGtBC,uBAHsB,GAGZL,UAAU,CAACM,WAAX,EAHY;AAItBC,yBAJsB,GAIVL,YAAY,CAACI,WAAb,EAJU;AAK1BD,uBAAM,GAAIA,OAAO,CAACG,SAAR,CAAkB,CAAlB,EAAqBH,OAAO,CAACI,OAAR,CAAgB,GAAhB,IAAqB,CAA1C,CAAV;AACAF,yBAAQ,GAAIA,SAAS,CAACC,SAAV,CAAoB,CAApB,EAAuBD,SAAS,CAACE,OAAV,CAAkB,GAAlB,IAAuB,CAA9C,CAAZ;AACAJ,uBAAM,IAAK,WAAX;AACAE,yBAAQ,IAAK,WAAb;AACAG,uBAAO,CAACC,GAAR,CAAYJ,SAAZ,EAAuBF,OAAvB;AAT0B;AAAA,uBAURO,KAAK,CAAC,8CAA8Cb,OAA9C,GAAwD,yBAAxD,GAAoFQ,SAApF,GAAgG,MAAhG,GAAyGF,OAA1G,CAVG;;AAAA;AAUpBQ,mBAVoB;AAAA;AAAA,uBAWPA,GAAG,CAACC,IAAJ,EAXO;;AAAA;AAWpBzB,oBAXoB;AAAA,iDAYnBA,IAZmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa9B;AAdM,GAdC;AA8BL0B,SA9BK,qBA8BK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACS,KAAI,CAACjB,cAAL,CAAoB,IAApB,CADT;;AAAA;AACNkB,oBADM;AAAA;AAAA,qBAES,KAAI,CAAClB,cAAL,CAAoB,IAApB,CAFT;;AAAA;AAENmB,oBAFM;AAAA;AAAA,qBAGS,KAAI,CAACnB,cAAL,CAAoB,IAApB,CAHT;;AAAA;AAGNoB,oBAHM;AAAA;AAAA,qBAIS,KAAI,CAACpB,cAAL,CAAoB,IAApB,CAJT;;AAAA;AAINqB,oBAJM;AAAA;AAAA,qBAKS,KAAI,CAACrB,cAAL,CAAoB,IAApB,CALT;;AAAA;AAKNsB,oBALM;AAAA;AAAA,qBAMS,KAAI,CAACtB,cAAL,CAAoB,IAApB,CANT;;AAAA;AAMNuB,oBANM;AAAA;AAAA,qBAOS,KAAI,CAACvB,cAAL,CAAoB,IAApB,CAPT;;AAAA;AAONwB,oBAPM;AASZZ,qBAAO,CAACC,GAAR,CAAYK,MAAZ,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4DC,MAA5D;;AATY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUf;AAxCU,CAAf","names":["name","components","data","AU","CH","ID","JP","KR","MY","US","methods","fetchCovidCase","country","enddateObj","Date","startdateObj","setDate","getDate","enddate","toISOString","startdate","substring","indexOf","console","log","fetch","res","json","created","dataAu","dataCh","dataId","dataJp","dataKr","dataMy","dataUs"],"sourceRoot":"","sources":["/Users/dioharyadi/Desktop/BT3103_project/CovidTravelTracker/src/components/AddDataFS.vue"],"sourcesContent":["<template>\n    <h1>Add for     \"Australia\": \"AU\",\n                \"China\":\"CN\",\n                \"Indonesia\": \"ID\",\n                \"Japan\" :\"JP\",\n                \"Korea\": \"KR\",\n                \"Malaysia\": \"MY\",\n                \"United States\": \"US\", \n    </h1>\n</template>\n<script>\nexport default {\n    name : 'AddDataFS',\n    components : {},\n    data() {\n        return  {\n            AU: [],\n            CH: [],\n            ID: [],\n            JP: [],\n            KR: [],\n            MY: [],\n            US: [],\n        }\n    },\n    methods : {\n        async fetchCovidCase(country) {\n            var enddateObj = new Date()\n            var startdateObj = new Date(new Date().setDate(enddateObj.getDate()-30));\n            var enddate = enddateObj.toISOString();\n            var startdate = startdateObj.toISOString();\n            enddate = enddate.substring(0, enddate.indexOf('T')+1);\n            startdate = startdate.substring(0, startdate.indexOf('T')+1);\n            enddate += \"00:00:00Z\"\n            startdate += \"00:00:00Z\"\n            console.log(startdate, enddate)\n            const res = await fetch('https://api.covid19api.com/total/country/' + country + '/status/confirmed?from=' + startdate + '&to=' + enddate)\n            const data = await res.json()\n            return data\n        }\n    },\n    async created() {\n        const dataAu = await this.fetchCovidCase(\"au\")\n        const dataCh = await this.fetchCovidCase(\"cn\")\n        const dataId = await this.fetchCovidCase(\"id\")\n        const dataJp = await this.fetchCovidCase(\"jp\")\n        const dataKr = await this.fetchCovidCase(\"kr\")\n        const dataMy = await this.fetchCovidCase(\"my\")\n        const dataUs = await this.fetchCovidCase(\"us\")\n\n        console.log(dataAu, dataCh, dataId, dataJp, dataKr, dataMy, dataUs)\n    },\n\n}\n</script>\n"]}]}